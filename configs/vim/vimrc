" Sets the directory for swap files
set directory^=$HOME/.vim/tmp//

" The home directory for vim
let g:KonHome = $HOME . '/.vim/'

" Useful for sourcing the path in variables.
function Src(path)
  exec 'source ' . g:KonHome . a:path
endfunction

" indentation settings
set tabstop=8 shiftwidth=8
set autoindent
set smartindent

" highlight the matched search pattern
set incsearch

" substitute all matches in a line instead of one
set gdefault

" keep buffers hidden
set hidden

" allow backspacing over the start of insert
set backspace=start

" show the line and column number of the cursor position
set ruler

" remove status line
set laststatus=0

set mouse=a

" turn on syntax highlighting
filetype plugin on
syntax on

" set redrawtime to fix syntax highlighting
set redrawtime=10000

" change the leader to space
let mapleader = "\<Space>"

" Use Ag with ack.vim
let g:ackprg="ag --nogroup --nocolor --column"

" write and quit more easily
nnoremap <silent> <leader>w :w<CR>
nnoremap <silent> <leader>q :q<CR>

" delete line below
nnoremap <silent> <leader>d :+d<CR>

" delete line above
nnoremap <silent> <leader>D :-d<CR>

" Same, but add whitespace with <leader>s
nnoremap <silent> <leader>s :<C-u>put=repeat(nr2char(10),v:count)<Bar>execute "'[-1"<CR>
nnoremap <silent> <leader>S :<C-u>put!=repeat(nr2char(10),v:count)<Bar>execute "']+1"<CR>

" select the last pasted text with gp
nnoremap gp `[v`]

" Jump around curly blocks with s
nnoremap s ]}
nnoremap S [{
vmap s ]}
vmap S [{

" Grep the codebase for the identifier under the cursor
nnoremap K :grep <cword><CR>

" PLUGINZ
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif

call Src('plugins.vim')

" ctrlp.vim conf
" show current buffers
nnoremap <leader>; :CtrlPBuffer <CR>

" show lines in current buffers
nnoremap <leader>: :CtrlPLine <CR>

" show files in directory of current file
nnoremap <leader>l :CtrlP <C-R>=expand("%:p:h") . "/" <CR><CR>

" show files in current directory
nnoremap <leader>k :CtrlP <CR><CR>

" show recently modified files
nnoremap <leader>ar :CtrlPMRU <CR>

nnoremap <leader>fd :ALEGoToDefinition <CR>
nnoremap <leader>fr :ALEFindReferences <CR>
nnoremap <leader>fR :ALERename <CR>
nnoremap <leader>ft :AleGoToTypeDefinition <CR>
nnoremap <leader>fg :ALEFix <CR>
nnoremap [e :ALEPreviousWrap <CR>
nnoremap ]e :ALENextWrap <CR>
" Custom lint error
let g:ale_cursor_detail = 1
let g:ale_hover_to_preview = 1
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 'never'
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_linters = {
	\ 'javascript': ['eslint', 'prettier'],
	\ 'typescript': ['tsserver', 'tslint'],
	\ 'json': ['jq'],
	\ 'haskell': ['hlint'],
	\}
let g:ale_fixers = {
	\ 'javascript': ['eslint', 'prettier'],
	\ 'typescript': ['tsserver', 'tslint'],
	\ 'json': ['jq'],
	\ 'haskell': ['hlint'],
	\}
let g:ale_linters_explicit = 1

let g:ale_javascript_prettier_options = '--single-quote --trailing-comma all'

nnoremap <leader>gb :Git blame<CR>
nnoremap <leader>gd :Gvdiffsplit!<CR>

" Quick jumps in quick list
map <c-n> :cn <CR>zz
