" Sets the directory for swap files
set directory^=$HOME/.vim/tmp//

" The home directory for vim
let g:KonHome=$HOME . '/.vim/'

" Useful for sourcing the path in variables.
function Src(path)
  exec 'source ' . g:KonHome . a:path
endfunction

" indentation settings
set expandtab
set tabstop=4 shiftwidth=4
set autoindent
set smartindent

" highlight the matched search pattern
set incsearch

" substitute all matches in a line instead of one
set gdefault

" keep buffers hidden
set hidden

" allow backspacing over the start of insert
set backspace=start,indent,eol

" show the line and column number of the cursor position
set ruler

" remove status line
set laststatus=0

" Always change the cursor shape and support the mouse
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"
if has('mouse')
   set mouse=a
   if !has('nvim')
      if has('mouse_sgr')
         set ttymouse=sgr
      else
         set ttymouse=xterm2
      endif
   endif
endif

" turn on syntax highlighting
filetype plugin on
syntax on

" set redrawtime to fix syntax highlighting
set redrawtime=10000

" change the leader to space
let mapleader = "\<Space>"

" use Ag with ack.vim
let g:ackprg="ag --nogroup --nocolor --column"

set termguicolors
function! SetKittyScheme() abort
	let bg = synIDattr(hlID('Normal'), 'bg#')
	let fg = synIDattr(hlID('Normal'), 'fg#')
	call system(
		\ "kitty @ --to " . $KITTY_LISTEN_ON
		\ . " set-colors -a" .
		\ " background=" . bg .
		\ " foreground=" . fg
		\ )
	call system("tmux set -g pane-active-border-style fg=\"" . bg . "\",bg=\"" . bg . "\"")
	call system("tmux set -g pane-border-style fg=\"" . bg . "\",bg=\"" . bg . "\"")
endfunction

if has("autocmd")
	autocmd ColorScheme * call SetKittyScheme()
endif


" write and quit more easily
nnoremap <silent> <leader>w :w<CR>
nnoremap <silent> <leader>q :q<CR>

" delete line below
nnoremap <silent> <leader>d :+d<CR>

" delete line above
nnoremap <silent> <leader>D :-d<CR>

" add whitespace with <leader>s
nnoremap <silent> <leader>s :<C-u>put=repeat(nr2char(10),v:count)<Bar>execute "'[-1"<CR>
nnoremap <silent> <leader>S :<C-u>put!=repeat(nr2char(10),v:count)<Bar>execute "']+1"<CR>

" select the last pasted text
nnoremap gp `[v`]

" jump around curly blocks with s
nnoremap s ]}
nnoremap S [{
vmap s ]}
vmap S [{

" grep the codebase for the identifier under the cursor
nnoremap K :grep <cword><CR>

" PLUGINZ
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif

call Src('plugins.vim')

" ctrlp.vim conf
" show current buffers
nnoremap <leader>; :CtrlPBuffer <CR>

" show lines in current buffers
nnoremap <leader>: :CtrlPLine <CR>

" show files in directory of current file
nnoremap <leader>l :CtrlP <C-R>=expand("%:p:h") . "/" <CR><CR>

" show files in current directory
nnoremap <leader>k :CtrlP <CR><CR>

" show recently modified files
nnoremap <leader>ar :CtrlPMRU <CR>

" ale
nnoremap <leader>fd :ALEGoToDefinition <CR>
nnoremap <leader>fr :ALEFindReferences <CR>
nnoremap <leader>fR :ALERename <CR>
nnoremap <leader>fg :ALEFix <CR>
nnoremap [e :ALEPreviousWrap <CR>
nnoremap ]e :ALENextWrap <CR>

let g:ale_sign_error = '->'
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 'never'
highlight ALEErrorSign ctermbg=NONE ctermfg=red
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_linters = {
	\ 'javascript': ['eslint'],
	\ 'typescript': ['eslint'],
	\ 'haskell': ['hlint'],
	\ 'yaml': ['yamllint'],
	\ 'json': ['prettier'],
	\ 'terraform': ['terraform'],
	\ 'go': ['gopls'],
	\ 'python': ['mypy'],
	\}
let g:ale_fixers = {
	\ 'javascript': ['eslint', 'prettier'],
	\ 'typescript': ['eslint', 'prettier'],
	\ 'json': ['prettier'],
	\ 'haskell': ['hlint'],
	\ 'terraform': ['terraform'],
	\ 'go': ['gofmt'],
	\}
let g:ale_linters_explicit = 1
let g:ale_fixers_explicit = 1

" git
nnoremap <leader>gb :Git blame<CR>
nnoremap <leader>gd :Gvdiffsplit!<CR>

" quick jumps in quick list
map <c-n> :cn <CR>

let g:fzf_colors =
\ { 'fg':         ['fg', 'Normal'],
  \ 'bg':         ['bg', 'Normal'],
  \ 'preview-bg': ['bg', 'NormalFloat'],
  \ 'hl':         ['fg', 'Comment'],
  \ 'fg+':        ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':        ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':        ['fg', 'Statement'],
  \ 'info':       ['fg', 'PreProc'],
  \ 'border':     ['fg', 'Ignore'],
  \ 'prompt':     ['fg', 'Conditional'],
  \ 'pointer':    ['fg', 'Exception'],
  \ 'marker':     ['fg', 'Keyword'],
  \ 'spinner':    ['fg', 'Label'],
  \ 'header':     ['fg', 'Comment'] }
